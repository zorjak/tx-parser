// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go
//
// Generated by this command:
//
//	mockgen -source=storage/storage.go -destination=storage/mock/storage.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	storage "github.com/zorjak/tx-parser/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddAddressToObserver mocks base method.
func (m *MockStorage) AddAddressToObserver(address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddressToObserver", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddAddressToObserver indicates an expected call of AddAddressToObserver.
func (mr *MockStorageMockRecorder) AddAddressToObserver(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToObserver", reflect.TypeOf((*MockStorage)(nil).AddAddressToObserver), address)
}

// AddTransaction mocks base method.
func (m *MockStorage) AddTransaction(transaction storage.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTransaction", transaction)
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockStorageMockRecorder) AddTransaction(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockStorage)(nil).AddTransaction), transaction)
}

// AddTransactionToAddress mocks base method.
func (m *MockStorage) AddTransactionToAddress(address, transaction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactionToAddress", address, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransactionToAddress indicates an expected call of AddTransactionToAddress.
func (mr *MockStorageMockRecorder) AddTransactionToAddress(address, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactionToAddress", reflect.TypeOf((*MockStorage)(nil).AddTransactionToAddress), address, transaction)
}

// IsAddressObserved mocks base method.
func (m *MockStorage) IsAddressObserved(address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressObserved", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressObserved indicates an expected call of IsAddressObserved.
func (mr *MockStorageMockRecorder) IsAddressObserved(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressObserved", reflect.TypeOf((*MockStorage)(nil).IsAddressObserved), address)
}

// LastParsedBlock mocks base method.
func (m *MockStorage) LastParsedBlock() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastParsedBlock")
	ret0, _ := ret[0].(int)
	return ret0
}

// LastParsedBlock indicates an expected call of LastParsedBlock.
func (mr *MockStorageMockRecorder) LastParsedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastParsedBlock", reflect.TypeOf((*MockStorage)(nil).LastParsedBlock))
}

// SetLastParsedBlock mocks base method.
func (m *MockStorage) SetLastParsedBlock(block int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastParsedBlock", block)
}

// SetLastParsedBlock indicates an expected call of SetLastParsedBlock.
func (mr *MockStorageMockRecorder) SetLastParsedBlock(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastParsedBlock", reflect.TypeOf((*MockStorage)(nil).SetLastParsedBlock), block)
}

// Transaction mocks base method.
func (m *MockStorage) Transaction(hash string) (storage.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", hash)
	ret0, _ := ret[0].(storage.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockStorageMockRecorder) Transaction(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockStorage)(nil).Transaction), hash)
}

// TransactionsOfAddress mocks base method.
func (m *MockStorage) TransactionsOfAddress(address string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionsOfAddress", address)
	ret0, _ := ret[0].([]string)
	return ret0
}

// TransactionsOfAddress indicates an expected call of TransactionsOfAddress.
func (mr *MockStorageMockRecorder) TransactionsOfAddress(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionsOfAddress", reflect.TypeOf((*MockStorage)(nil).TransactionsOfAddress), address)
}
